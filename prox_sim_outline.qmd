---
title: "PROX Simulation Specs"
format: 
  html:
    code-fold: true
    fig-width: 10
    fig-height: 8
    toc: true
knitr:
  opts_chunk: 
    message: false
    warning: false
editor_options: 
  chunk_output_type: console
---

## PROX Simulation Outline

This simulation will compare the recovery of simulated ability parameters using different ability estimation functions with fixed item parameter estimates. The PROX method [@cohen1972] will be compared to:

-   Joint Maximum Likelihood Estimation (JMLE; TAM package) *Can use fixed item parameters*
-   Marginal Maximum Likelihood Estimation (MMLE; TAM or ltm package) *TAM uses EAP after MMLE*
-   Conditional Maximum Likelihood Estimation (CMLE; Winsteps) *Can use fixed item parameters, takes magnitudes longer than the other methods (\~2 minutes in condition 1)*
-   Expected a Posteriori estimator (EAP; irtoys package) *Uses LTM as the backend, can use fixed item parameters*

The comparisons between these estimation methods will look at different distributions of person abilities and different sample sizes of responses. The different levels of these factors are:

-   Parameter Distributions:
    -   Both items and persons: A standard normal distribution, $\theta \sim \mathcal{N}(\mu = 0, \sigma^2 = 1)$

    -   Both items and persons: $\theta \sim \mathcal{N}(0, 2)$

    -   Items = $\theta \sim \mathcal{N}(-1, 1)$ and Persons = $\theta \sim \mathcal{N}(1, 1)$

    -   Items = $\theta \sim \mathcal{N}(-2, 1)$ and Persons = $\theta \sim \mathcal{N}(2, 1)$

    -   Items = $\theta \sim \mathcal{N}(-3, 1)$ and Persons = $\theta \sim \mathcal{N}(3, 1)$

    -   Items = $\theta \sim \mathcal{N}(0, 1)$ and Persons = bimodal mixture distribution with equal $\sigma^2 = 0.5$ and modes $\mathcal{Mo}_1 = -1.5$ and $\mathcal{Mo}_2 = 1.5$
    -   Items = bimodal mixture distribution with equal $\sigma^2 = 0.5$ and modes $\mathcal{Mo}_1 = -1.5$ and $\mathcal{Mo}_2 = 1.5$ and Persons = $\theta \sim \mathcal{N}(0, 1)$
-   Person Sample sizes:
    -   $n = 25$
    -   $n = 50$
    -   $n = 100$
    -   $n = 200$
    -   $n = 500$
    -   $n = 1000$

Here is a table of each condition label and its parameter values.

```{r}
#| label: simulation-conditions-table

require(tidyverse, quietly = TRUE)
person_sample_sizes = c(25, 50, 100, 200, 500, 1000)
number_items = c(100, 150, 200)
parameter_distribution_condition = c("Standard Normal", "Wide Normal", "-1 Item Diff, +1 Person Theta", "-2 Item Diff, +2 Person Theta", "-3 Item Diff, +3 Person Theta", "Normal Items, Bimodal Persons", "Bimodal Items, Normal Persons")

conditions = expand.grid(person_sample_sizes, number_items, parameter_distribution_condition)
conditions = cbind(paste0("Condition ", 1:nrow(conditions)), conditions)
conditions = conditions[, c(1, 4, 3, 2)]
colnames(conditions) = c("Condition", "Item_and_Person_Params", "Items", "N")

conditions =
  conditions %>%
  mutate(
    Condition = 
      case_when(
        grepl(" [0-9]{1}$", Condition) ~ str_replace(Condition, "Condition ", "Condition 0")
    , TRUE ~ Condition
    )
  )
kableExtra::kbl(conditions, col.names = c("Condition Number", "Item/Person Parameters", "Number of Items", "Number of Persons")) %>%
  kableExtra::kable_styling(fixed_thead = T, bootstrap_options = 'condensed') %>%
  kableExtra::scroll_box()

conditions_save <- 
  conditions %>% 
  mutate(
    filename = 
      Condition %>%
      tolower() %>%
      str_replace(" ", "_") %>%
      str_replace("_0", "_") %>%
      paste0("_estimates.RDS")
    )

conditions_save %>%
  saveRDS("results/conditions.RDS")
```

## Creating the data

The following code chunk provides some setup for the simulation. It loads the required packages and defines functions to simulate the response data for analysis.

```{r setup}
require(TAM)
require(eRm)
require(irtoys)

iter = 100

rasch_response_sim = function(person_theta_value, item_diff_value) {
  resp_prob = exp(person_theta_value - item_diff_value) / (1 + exp(person_theta_value - item_diff_value))
  response = ifelse(
    test = runif(n = length(resp_prob)) <= resp_prob,
    yes = 1,
    no = 0)
  return(response)
}
prox_estimate = function(mean_item_diff, sd_item_diff, observed_raw_score, maximum_score) {
  estimate <-
    mean_item_diff + 
    sqrt(1 + sd_item_diff/2.9) * 
    log(observed_raw_score/(maximum_score - observed_raw_score))
  estimate <- 
    ifelse(estimate == Inf, 6,
           ifelse(estimate == -Inf, -6, 
                  estimate
                  )
           )
  estimate
}

winsteps_estimate = function(
    item_anchor_file = "sim.anchor",
    data_file = 'test.dat',
    scores_file = 'theta.out',
    data = NULL,
    item_params = items
    ) {
  require(tidyverse)
  # data file:
  test_data <-
    data %>%
    mutate(delim = "*", .after = 1) %>%
    pivot_wider(
      id_cols = c(id, delim)
      , names_from = item
      , values_from = response
    ) 
  
  test_data %>%
    write_delim(file = paste0('temp/', data_file), delim = '', col_names = FALSE)
  
  # item files:
  item_order <- 
    tibble(ItemID = colnames(test_data)[-c(1,2)])
  n_items = nrow(item_order)
  item_anchor_content <-
    item_order %>%
    left_join(
      item_params %>%
        dplyr::select(ItemID, IRTb) %>%
        distinct()
      ) %>%
    mutate(seq = row_number()) %>%
    dplyr::select(seq, IRTb, ItemID)
  item_anchor_content %>%
    mutate(delim = ";", .before = 3) %>%
    write_tsv(file = paste0('temp/', item_anchor_file), col_names = FALSE)
  
  # control file:
  control <-
    paste0(
'IAFILE=', item_anchor_file, ';
;******************************************
;Estimation & Convergence Criteria
;******************************************
MPROX=20                 	; Maximum of 20 PROX iterations
CMLE=Yes                  ; Use CMLE
;MJMLE=0                  ; Unlimited JMLE iterations
;XMLE=Yes                 ; Use XMLE=YES when calibrating items BUT XMLE=NO when computing person ability estimates
CONVERGE=L                ; 
LCONV=.0001               ; Stop iterating when the largest change is < 0.0001 logits
;RCONV=0.1               	; RCONV is not useful when anchor values are used. 
UDECIM=4                 	; Compute Estimates to 4 decimal places

TFILE=*
3.1
3.2
*;
;******************************************
;Input Data Format
;******************************************
CODES=01;
DATA=', data_file, ';
NAME1=1;
NAMLEN=4;
ITEM=Item;
ITEM1=6
NI=', n_items, ';
;******************************************
; Output Files
;******************************************
PFILE=', scores_file,';
;******************************************
; Item Labels
;******************************************
&END
', paste0(item_order$ItemID, collapse = ' \n'), '
END LABELS'
)
  control %>%
    write_lines('temp/overall_control.ctr')
  
  # .bat file
  paste0(
    'C:/Winsteps/Winsteps.exe	BATCH=YES "overall_control.ctr" '
    , '"OUT.csv" HLINES=YES'
  ) %>%
    write_lines('temp/winsteps_overall.bat')
  
  # run .bat
  system("cmd.exe",
         input = paste(' cd temp/ & winsteps_overall.bat'),
         show.output.on.console = FALSE,
         ignore.stdout = TRUE)
}
winsteps_read_scores = function(scores_file = 'theta.out') {
  require(tidyverse)
  overall_scores <-
    read_table(file = paste0('temp/', scores_file)
               , show_col_types = FALSE
               , skip = 1) 
  if (nrow(overall_scores) == 0) {
    overall_scores <-
      tibble(
        RegID = NA, winsteps_answered = NA, winsteps_number_correct = NA
        , winsteps_estimate = NA, Exam = exam
        , winsteps_score = NA
      )
    } else {
      overall_scores <-
        overall_scores %>%
          dplyr::select(MEASURE) %>%
        unlist() %>%
        as.numeric()
    }
    return(overall_scores)
}

# options('warn' = 2)
```

Then, for each condition, we create the simulated item and person parameters and use the different estimation methods to estimate the person parameters based on the simulated data.

For PROX, a custom function using the formula [given on the Winsteps website](https://www.winsteps.com/winman/iterations.htm) was implemented.

For JMLE, the `tam.jml` function accepts the matrix of responses and, optionally, a matrix of item numbers (first column) and item difficulties (second column) to use as fixed values. This puts the focus on the *person parameter estimates* which is what we want for our simulation. The `$theta` element of the resulting list holds the estimated person parameters. Since the function does not automatically remove items with no correct responses, the simulation automatically removes these items (if they exist in the given iteration) and estimates person parameters based on the remaining items.

For MMLE, the `tam.mml` function behaves similarly. The output is different, however; we need to access `$person$EAP` to get the person theta estimates using the expected a posteriori of the marginal maximum likelihood estimator. Since some items may normally be removed due to the number of correct responses, we also specify `item.elim = FALSE` to keep these items in the analysis.
<!-- I forgot to actually include the mml EAP estimates in the final results, d'oh! -->

For CMLE, the Winsteps software is used. A custom function that manages the Winsteps control files and reads in the results was created as a simpler and more programmatic interface between the simulation conditions and Winsteps. With fixed item parameters, Winsteps is able to generate person parameters with CMLE; other common Rasch/IRT software does not seem to have this functionality.

<!-- For CMLE, the `eRm::RM` function takes the scored matrix and estimates the full model (item and person parameters) "simultaneously", so we can't provide the known item difficulties for this procedure. We also need to extract the person theta estimates with the `eRm::person.parameter` function, accessing the stored estimates in the output with `$theta.table$'Person Parameter'`. This does mean the CMLE estimates are not strictly comparable and may have additional estimation discrepancies. As the `eRm` package sometimes has issues with all correct/all incorrect response patterns, there is a wrapper function implemented that removes problematic items from the scored matrix when `eRm` throws an error and reruns the estimation process. -->

For EAP, the `irtoys` package provides an `eap()` estimator in the `ability()` function that can utilize the known item parameters. The first column of resulting matrix provides the ability estimates for each provided response pattern in the scoring matrix. Under the hood, it uses the `ltm` package by default.   

### Standard Normal

```{r condition-1}
#| eval: false
#| output: false
#| echo: true
# Conditions 1-18 Parameters


m_item = m_person = 0
sd_item = sd_person = 1
estimates_file_name = 'simdata/01_standard_normal_estimates.RDS'
responses_file_name = 'simdata/01_standard_normal_responses.RDS'

condition_1_estimates = vector(mode = 'list', length = 18*iter)
condition_1_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Standard Normal"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_1_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_1_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}


saveRDS(condition_1_estimates, file = estimates_file_name)
saveRDS(condition_1_responses, file = responses_file_name)

rm(list = c('condition_1_estimates', 'condition_1_responses'))
```



### Wide Normal

```{r condition-2}
#| eval: false
#| output: false
#| echo: true
# Conditions 19-36 Parameters


m_item = m_person = 0
sd_item = sd_person = 2
estimates_file_name = 'simdata/02_wide_normal_estimates.RDS'
responses_file_name = 'simdata/02_wide_normal_responses.RDS'

condition_2_estimates = vector(mode = 'list', length = 18*iter)
condition_2_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Wide Normal"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_2_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_2_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}


saveRDS(condition_2_estimates, file = estimates_file_name)
saveRDS(condition_2_responses, file = responses_file_name)

rm(list = c('condition_2_estimates', 'condition_2_responses'))
```



### -1 Item +1 Theta

```{r condition-3}
#| eval: false
#| output: false
#| echo: true
# Conditions 37-54 Parameters


m_item = -1; m_person = 1
sd_item = sd_person = 1
estimates_file_name = 'simdata/03_small_mismatch_estimates.RDS'
responses_file_name = 'simdata/03_small_mismatch_responses.RDS'

condition_3_estimates = vector(mode = 'list', length = 18*iter)
condition_3_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Small Mismatch"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_3_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_3_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}


saveRDS(condition_3_estimates, file = estimates_file_name)
saveRDS(condition_3_responses, file = responses_file_name)

rm(list = c('condition_3_estimates', 'condition_3_responses'))
```



### -2 Item +2 Theta

```{r condition-4}
#| eval: false
#| output: false
#| echo: true
# Conditions 55-72 Parameters


m_item = -2; m_person = 2
sd_item = sd_person = 1
estimates_file_name = 'simdata/04_large_mismatch_estimates.RDS'
responses_file_name = 'simdata/04_large_mismatch_responses.RDS'

condition_4_estimates = vector(mode = 'list', length = 18*iter)
condition_4_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Large Mismatch"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_4_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_4_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}


saveRDS(condition_4_estimates, file = estimates_file_name)
saveRDS(condition_4_responses, file = responses_file_name)

rm(list = c('condition_4_estimates', 'condition_4_responses'))
```



### -3 Item +3 Theta

```{r condition-5}
#| eval: false
#| output: false
#| echo: true
# Conditions 73-90 Parameters


m_item = -3; m_person = 3
sd_item = sd_person = 1
estimates_file_name = 'simdata/05_extreme_mismatch_estimates.RDS'
responses_file_name = 'simdata/05_extreme_mismatch_responses.RDS'

condition_5_estimates = vector(mode = 'list', length = 18*iter)
condition_5_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Extreme Mismatch"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_5_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_5_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}


saveRDS(condition_5_estimates, file = estimates_file_name)
saveRDS(condition_5_responses, file = responses_file_name)

rm(list = c('condition_5_estimates', 'condition_5_responses'))
```



### Normal Item, Bimodal Theta

```{r condition-6}
#| eval: false
#| output: false
#| echo: true
# Conditions 73-90 Parameters


m_item = 0; m_person_1 = -1.5; m_person_2 = 1.5
sd_item = 1; sd_person = 0.5
estimates_file_name = 'simdata/06_bimodal_persons_estimates.RDS'
responses_file_name = 'simdata/06_bimodal_persons_responses.RDS'

condition_6_estimates = vector(mode = 'list', length = 18*iter)
condition_6_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Bimodal Persons"
        , ItemMean = m_item, ItemSD = sd_item
        , PersonMean = paste0(m_person_1, "; ", m_person_2), PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = m_item, sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = c(m_person_1, m_person_2), sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_6_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_6_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}

saveRDS(condition_6_estimates, file = estimates_file_name)
saveRDS(condition_6_responses, file = responses_file_name)

rm(list = c('condition_6_estimates', 'condition_6_responses'))
```



### Bimodal Item, Normal Theta

```{r condition-7}
#| eval: false
#| output: false
#| echo: true
# Conditions 73-90 Parameters


m_item_1 = -1.5; m_item_2 = 1.5; m_person = 0
sd_item = 0.5; sd_person = 1
estimates_file_name = 'simdata/07_bimodal_items_estimates.RDS'
responses_file_name = 'simdata/07_bimodal_items_responses.RDS'

condition_7_estimates = vector(mode = 'list', length = 18*iter)
condition_7_responses = vector(mode = 'list', length = 18*iter)
iter_count = 1

for (j in number_items) {
  print(paste0("Items: ", j))
  for (n in person_sample_sizes) {
    print(paste0("Persons: ", n))
    condition_name =
      tibble(
        Title = "Bimodal Items"
        , ItemMean = paste0(m_item_1, "; ", m_item_2), ItemSD = sd_item
        , PersonMean = m_person, PersonSD = sd_person
        , N_Items = j
        , N_Person = n
        )
    for (i in 1:iter) {
      item_diff = round(rnorm(n = j, mean = c(m_item_1, m_item_2), sd = sd_item), 3)
      person_theta = rnorm(n = n, mean = m_person, sd = sd_person)

      responses = matrix(nrow = n, ncol = j)

      for (p in 1:n) {
        responses[p,] = rasch_response_sim(person_theta[p], item_diff)
      }

      zero_correct_items = which(colSums(responses) == 0 |
                                   colSums(responses) == n)
      if (length(zero_correct_items) > 0) {
        modified_responses = responses[, -zero_correct_items]
        modified_item_diff = item_diff[-zero_correct_items]
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      } else {
        modified_responses = responses
        modified_item_diff = item_diff
        winsteps_item_diff = tibble(IRTb = modified_item_diff) %>%
          mutate(ItemID = paste0("V", row_number()))
      }

      prox_theta_est = prox_estimate(mean_item_diff = mean(item_diff),
                                     sd_item_diff = sd(item_diff),
                                     observed_raw_score = rowSums(responses),
                                     maximum_score = j)
      jmle_theta_est = TAM::tam.jml(
        modified_responses
        , xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff)
        , verbose = FALSE
      )$theta
      mmle_theta_est = TAM::tam.mml(
        modified_responses,
        xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff),
        item.elim = FALSE,
        verbose = FALSE
      )$person$EAP

      modified_responses %>%
        as_tibble() %>%
        mutate(
          id = paste0('00000', row_number()) %>% str_sub(-4, -1)
          , .before = 1
        ) %>%
        pivot_longer(
          cols = -id
          , names_to = 'item'
          , values_to = 'response'
        ) %>%
        winsteps_estimate(
          data = .
          , item_params = winsteps_item_diff
        )
      cmle_theta_est = winsteps_read_scores()

      eap_theta_est  =
        irtoys::ability(resp = modified_responses,
                        ip = list('est' = cbind(
                          1, modified_item_diff, 0, deparse.level = 0
                        )),
                        method = 'EAP')[, 1]

      thetas = cbind(person_theta,
                     prox_theta_est,
                     jmle_theta_est,
                     mmle_theta_est,
                     cmle_theta_est,
                     eap_theta_est)

      condition_7_estimates[[iter_count]] = list(Condition = condition_name, Theta = thetas)
      condition_7_responses[[iter_count]] = list(Condition = condition_name, ItemDiff = item_diff, Responses = responses)

      iter_count = iter_count + 1
    }
    
  }
}

saveRDS(condition_7_estimates, file = estimates_file_name)
saveRDS(condition_7_responses, file = responses_file_name)

rm(list = c('condition_7_estimates', 'condition_7_responses'))
```



## Analyzing the data

"Point-Estimate" methods to analyze the data:

  1. Correlation between true and estimated theta
  2. (Mean) Bias
  3. Mean Absolute Difference
  4. Mean Square Error
  5. Root Mean Square Error
  
done for each iteration of each condition. Then, these estimates can be averaged and a standard error of each measure calculated.

Using the "point estimate" for each condition as the DV, an ANOVA/LR can be used with the condition variables as IVs.

## Correlation

```{r correlation-between-estimates}
#| eval: true

mean_corr_list <- function(x) {
  y <- list(Reduce("+", x) / length(x))
  
  y %>% 
    as.data.frame() %>%
    pivot_longer(cols = everything(), names_to = 'x_value', values_to = 'MeanCorrelation') %>% 
    add_column('y_value' = rep(c('person_theta', 'prox_theta_est', 'jmle_theta_est', 'mmle_theta_est', 'cmle_theta_est', 'eap_theta_est'), each = 6), .before = 2) %>%
    list()
}

estimates_files_list <-
  list.files('simdata/', pattern = 'estimates', full.names = T)

loaded_estimates <-
  readRDS(estimates_files_list[1])

mean_correlation <-
  loaded_estimates %>%
  purrr::map('Condition') %>%
  bind_rows() %>%
  mutate(across(everything(), as.character)) %>%
  mutate(
    Correlation =
      loaded_estimates %>%
      purrr::map('Theta') %>%
      purrr::map(cor) %>%
      purrr::map(\(x) ifelse(is.na(x), 0, x))
  ) %>%
  group_by(
    Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
  ) %>%
  mutate(
    Mean_Correlation = Correlation %>% mean_corr_list() 
    )

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
  readRDS(estimates_files_list[i])
  
  mean_correlation <-
    bind_rows(
      mean_correlation
      , loaded_estimates %>%
          purrr::map('Condition') %>%
          bind_rows() %>%
          mutate(across(everything(), as.character)) %>%
          mutate(
            Correlation =
              loaded_estimates %>%
              purrr::map('Theta') %>%
              purrr::map(cor) %>%
              purrr::map(\(x) ifelse(is.na(x), 0, x))
          ) %>%
          group_by(
            Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
          ) %>%
          mutate(Mean_Correlation = Correlation %>% mean_corr_list())
    )
  }

mean_correlation %>%
  dplyr::select(-Correlation) %>%
  distinct() %>%
  saveRDS('results/00_mean_correlation.RDS')
```

```{r plot-mean-correlations-persons}
#| eval: true
#| fig-cap: "Mean Correlations Across Iterations by Mismatch Type and Number of Persons"
#| fig-dpi: 300
mean_correlation <-
  readRDS('results/00_mean_correlation.RDS')
title_factor =
  c(
    "Standard Normal", "Wide Normal",  "Bimodal Persons", "Bimodal Items",
    "Small Mismatch", "Large Mismatch", "Extreme Mismatch"
  )

mean_correlation %>%
  unnest(Mean_Correlation) %>%
  mutate(
    Title = fct(Title, levels = title_factor)
    , N_Person = fct(N_Person, levels = c('25', '50', '100', '200', '500', '1000'))
    , x_value = str_remove(x_value, "_est")
    , y_value = str_remove(y_value, "_est")
    , x_value = fct(x_value, levels = c('person_theta', 'prox_theta', "jmle_theta", "cmle_theta", "mmle_theta", "eap_theta"))
    , y_value = fct(y_value, levels = c('person_theta', 'prox_theta', "jmle_theta", "cmle_theta", "mmle_theta", "eap_theta"))
    ) %>%
  ggplot() +
  geom_tile(
    aes(x = x_value, y = y_value, fill = MeanCorrelation)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust = 1)) +
  scale_fill_gradient(low="black", high="white") +
  facet_wrap(~Title + N_Person, ncol = 6, labeller = label_wrap_gen(multi_line=FALSE))
```

```{r plot-mean-correlations-items}
#| eval: true
#| fig-cap: "Mean Correlations Across Iterations by Mismatch Type and Number of Items"


mean_correlation %>%
  unnest(Mean_Correlation) %>%
  mutate(
    Title = fct(Title, levels = title_factor)
    , N_Person = fct(N_Person, levels = c('25', '50', '100', '200', '500', '1000'))
    , x_value = str_remove(x_value, "_est")
    , y_value = str_remove(y_value, "_est")
    , x_value = fct(x_value, levels = c('person_theta', 'prox_theta', "jmle_theta", "cmle_theta", "mmle_theta", "eap_theta"))
    , y_value = fct(y_value, levels = c('person_theta', 'prox_theta', "jmle_theta", "cmle_theta", "mmle_theta", "eap_theta"))
    ) %>%
  ggplot() +
  geom_tile(
    aes(x = x_value, y = y_value, fill = MeanCorrelation)
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 65, vjust = 1, hjust = 1)) +
  scale_fill_gradient(low="black", high="white") +
  facet_wrap(~Title + N_Items, ncol = 3, labeller = label_wrap_gen(multi_line=FALSE))
```
## "Point-Estimate"
### "Point-Estimate" functions
```{r analysis-critera-function}
#| eval: true

bias_estimator = function(data) {
  true_theta = data[,1]
  bias = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 6 ~ 6
          , prox_theta_est == -Inf | prox_theta_est < -6 ~ -6
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 6 ~ 6
          , cmle_theta_est == -Inf | cmle_theta_est < -6 ~ -6
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 6 ~ 6
          , jmle_theta_est == -Inf | jmle_theta_est < -6 ~ -6
          , TRUE ~ jmle_theta_est
        )
      , mmle_theta_est =
        case_when(
          mmle_theta_est == Inf | mmle_theta_est > 6 ~ 6
          , mmle_theta_est == -Inf | mmle_theta_est < -6 ~ -6
          , TRUE ~ mmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 6 ~ 6
          , eap_theta_est == -Inf | eap_theta_est < -6 ~ -6
          , TRUE ~ eap_theta_est
        )
    ) 
  
  for (i in 2:ncol(data)) {
    numerator = sum(data[,i] - true_theta)
    
    bias_est = numerator / length(true_theta)
    
    bias = c(bias, bias_est)
  }
  names(bias) = paste0(colnames(data)[-1], "_bias")
  
  return(bias)
}

mad_estimator = function(data) {
  true_theta = data[,1]
  mad = c()
  
    data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 6 ~ 6
          , prox_theta_est == -Inf | prox_theta_est < -6 ~ -6
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 6 ~ 6
          , cmle_theta_est == -Inf | cmle_theta_est < -6 ~ -6
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 6 ~ 6
          , jmle_theta_est == -Inf | jmle_theta_est < -6 ~ -6
          , TRUE ~ jmle_theta_est
        )
      , mmle_theta_est =
        case_when(
          mmle_theta_est == Inf | mmle_theta_est > 6 ~ 6
          , mmle_theta_est == -Inf | mmle_theta_est < -6 ~ -6
          , TRUE ~ mmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 6 ~ 6
          , eap_theta_est == -Inf | eap_theta_est < -6 ~ -6
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum(abs(data[,i] - true_theta))
    mad_est = numerator / (length(true_theta) - 1)
    
    mad = c(mad, mad_est)
  }
  names(mad) = paste0(colnames(data)[-1], "_MAD")
  return(mad)
}

mse_estimator = function(data) {
  true_theta = data[,1]
  mse = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 6 ~ 6
          , prox_theta_est == -Inf | prox_theta_est < -6 ~ -6
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 6 ~ 6
          , cmle_theta_est == -Inf | cmle_theta_est < -6 ~ -6
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 6 ~ 6
          , jmle_theta_est == -Inf | jmle_theta_est < -6 ~ -6
          , TRUE ~ jmle_theta_est
        )
      , mmle_theta_est =
        case_when(
          mmle_theta_est == Inf | mmle_theta_est > 6 ~ 6
          , mmle_theta_est == -Inf | mmle_theta_est < -6 ~ -6
          , TRUE ~ mmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 6 ~ 6
          , eap_theta_est == -Inf | eap_theta_est < -6 ~ -6
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum((data[,i] - true_theta)^2)
    mse_est = numerator / (length(true_theta) - 1)
    
    mse = c(mse, mse_est)
  }
  
  names(mse) = paste0(colnames(data)[-1], "_MSE")
  
  return(mse)
}

rmse_estimator = function(data) {
  true_theta = data[,1]
  rmse = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 6 ~ 6
          , prox_theta_est == -Inf | prox_theta_est < -6 ~ -6
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 6 ~ 6
          , cmle_theta_est == -Inf | cmle_theta_est < -6 ~ -6
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 6 ~ 6
          , jmle_theta_est == -Inf | jmle_theta_est < -6 ~ -6
          , TRUE ~ jmle_theta_est
        )
      , mmle_theta_est =
        case_when(
          mmle_theta_est == Inf | mmle_theta_est > 6 ~ 6
          , mmle_theta_est == -Inf | mmle_theta_est < -6 ~ -6
          , TRUE ~ mmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 6 ~ 6
          , eap_theta_est == -Inf | eap_theta_est < -6 ~ -6
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum((data[,i] - true_theta)^2)
    rmse_est = sqrt(numerator / (length(true_theta) - 1))
    
    rmse = c(rmse, rmse_est)
  }
  
  names(rmse) = paste0(colnames(data)[-1], "_RMSE")

  return(rmse)
}

se_estimator = function(data) { # not vectorized like the others
  mean_est = mean(data, na.rm = TRUE)
  n = sum(!is.na(data))
  
  data_clean <- data[!is.na(data)]
  numerator = sum((data_clean - mean_est)^2)
  se_est = sqrt(numerator / (n - 1))
  
  return(se_est)
}

conditions <-
  readRDS("results/conditions.RDS")
```

### Mean Bias
```{r bias-estimates}
#| eval: false

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_bias_estimates <-
  loaded_estimates %>%
  purrr::map('Condition') %>%
  bind_rows() %>%
  mutate(across(everything(), as.character)) %>%
  mutate(
    Theta =
      loaded_estimates %>%
      purrr::map('Theta')
  ) %>%
  group_by(
    Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
  ) %>%
  mutate(
    Mean_Bias_Iteration = Theta %>% purrr::map(bias_estimator)
    ) %>%
  unnest_wider(Mean_Bias_Iteration) %>%
  mutate(
    Mean_Bias_Prox   = mean(prox_theta_est_bias)
    , Mean_Bias_JMLE = mean(jmle_theta_est_bias)
    , Mean_Bias_MMLE = mean(mmle_theta_est_bias)
    , Mean_Bias_CMLE = mean(cmle_theta_est_bias)
    , Mean_Bias_EAP  = mean(eap_theta_est_bias)
    , SD_Bias_Prox   = sd(prox_theta_est_bias)
    , SD_Bias_JMLE   = sd(jmle_theta_est_bias)
    , SD_Bias_MMLE   = sd(mmle_theta_est_bias)
    , SD_Bias_CMLE   = sd(cmle_theta_est_bias)
    , SD_Bias_EAP    = sd(eap_theta_est_bias)
  ) 

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  all_bias_estimates <-
    bind_rows(
      all_bias_estimates
      , loaded_estimates %>%
        purrr::map('Condition') %>%
        bind_rows() %>%
        mutate(across(everything(), as.character)) %>%
        mutate(
          Theta =
            loaded_estimates %>%
            purrr::map('Theta')
        ) %>%
        group_by(
          Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
        ) %>%
        mutate(
          Mean_Bias_Iteration = Theta %>% purrr::map(bias_estimator)
          ) %>%
        unnest_wider(Mean_Bias_Iteration) %>%
        mutate(
          Mean_Bias_Prox   = mean(prox_theta_est_bias)
          , Mean_Bias_JMLE = mean(jmle_theta_est_bias)
          , Mean_Bias_MMLE = mean(mmle_theta_est_bias)
          , Mean_Bias_CMLE = mean(cmle_theta_est_bias)
          , Mean_Bias_EAP  = mean(eap_theta_est_bias)
          , SD_Bias_Prox   = sd(prox_theta_est_bias)
          , SD_Bias_JMLE   = sd(jmle_theta_est_bias)
          , SD_Bias_MMLE   = sd(mmle_theta_est_bias)
          , SD_Bias_CMLE   = sd(cmle_theta_est_bias)
          , SD_Bias_EAP    = sd(eap_theta_est_bias)
        ) 
    )
}

all_bias_estimates %>%
  dplyr::select(contains("_est_")) %>%
  saveRDS("results/01_all_bias_estimates.RDS")

all_bias_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  saveRDS("results/01_mean_bias_by_condition.RDS")

all_bias_estimates %>%
  dplyr::select(contains("SD_")) %>%
  distinct() %>%
  saveRDS('results/01_se_bias_estimates.RDS')

```

### Mean Absolute Difference
```{r mad-estimates}
#| eval: false

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_mad_estimates <-
  loaded_estimates %>%
  purrr::map('Condition') %>%
  bind_rows() %>%
  mutate(across(everything(), as.character)) %>%
  mutate(
    Theta =
      loaded_estimates %>%
      purrr::map('Theta')
  ) %>%
  group_by(
    Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
  ) %>%
  mutate(
    Mean_MAD_Iteration = Theta %>% purrr::map(mad_estimator)
    ) %>%
  unnest_wider(Mean_MAD_Iteration) %>%
  mutate(
    Mean_MAD_Prox   = mean(prox_theta_est_MAD)
    , Mean_MAD_JMLE = mean(jmle_theta_est_MAD)
    , Mean_MAD_MMLE = mean(mmle_theta_est_MAD)
    , Mean_MAD_CMLE = mean(cmle_theta_est_MAD)
    , Mean_MAD_EAP  = mean(eap_theta_est_MAD)
    , SD_MAD_Prox   = sd(prox_theta_est_MAD)
    , SD_MAD_JMLE   = sd(jmle_theta_est_MAD)
    , SD_MAD_MMLE   = sd(mmle_theta_est_MAD)
    , SD_MAD_CMLE   = sd(cmle_theta_est_MAD)
    , SD_MAD_EAP    = sd(eap_theta_est_MAD)
  ) 

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  all_mad_estimates <-
    bind_rows(
      all_mad_estimates
      , loaded_estimates %>%
        purrr::map('Condition') %>%
        bind_rows() %>%
        mutate(across(everything(), as.character)) %>%
        mutate(
          Theta =
            loaded_estimates %>%
            purrr::map('Theta')
        ) %>%
        group_by(
          Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
        ) %>%
        mutate(
          Mean_MAD_Iteration = Theta %>% purrr::map(mad_estimator)
        ) %>%
        unnest_wider(Mean_MAD_Iteration) %>%
        mutate(
          Mean_MAD_Prox   = mean(prox_theta_est_MAD)
          , Mean_MAD_JMLE = mean(jmle_theta_est_MAD)
          , Mean_MAD_MMLE = mean(mmle_theta_est_MAD)
          , Mean_MAD_CMLE = mean(cmle_theta_est_MAD)
          , Mean_MAD_EAP  = mean(eap_theta_est_MAD)
          , SD_MAD_Prox   = sd(prox_theta_est_MAD)
          , SD_MAD_JMLE   = sd(jmle_theta_est_MAD)
          , SD_MAD_MMLE   = sd(mmle_theta_est_MAD)
          , SD_MAD_CMLE   = sd(cmle_theta_est_MAD)
          , SD_MAD_EAP    = sd(eap_theta_est_MAD)
        ) 
    )
}

all_mad_estimates %>%
  dplyr::select(contains("_est_")) %>%
  saveRDS("results/02_all_mad_estimates.RDS")

all_mad_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  saveRDS("results/02_mean_mad_by_condition.RDS")

all_mad_estimates %>%
  dplyr::select(contains("SD_")) %>%
  distinct() %>%
  saveRDS("results/02_se_mad_by_condition.RDS")
```

### Mean Square Error
```{r mse-estimates}
#| eval: false

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_mse_estimates <-
  loaded_estimates %>%
  purrr::map('Condition') %>%
  bind_rows() %>%
  mutate(across(everything(), as.character)) %>%
  mutate(
    Theta =
      loaded_estimates %>%
      purrr::map('Theta')
  ) %>%
  group_by(
    Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
  ) %>%
  mutate(
    Mean_MSE_Iteration = Theta %>% purrr::map(mse_estimator)
    ) %>%
  unnest_wider(Mean_MSE_Iteration) %>%
  mutate(
    Mean_MSE_Prox   = mean(prox_theta_est_MSE)
    , Mean_MSE_JMLE = mean(jmle_theta_est_MSE)
    , Mean_MSE_MMLE = mean(mmle_theta_est_MSE)
    , Mean_MSE_CMLE = mean(cmle_theta_est_MSE)
    , Mean_MSE_EAP  = mean(eap_theta_est_MSE)
    , SD_MSE_Prox   = sd(prox_theta_est_MSE)
    , SD_MSE_JMLE   = sd(jmle_theta_est_MSE)
    , SD_MSE_MMLE   = sd(mmle_theta_est_MSE)
    , SD_MSE_CMLE   = sd(cmle_theta_est_MSE)
    , SD_MSE_EAP    = sd(eap_theta_est_MSE)
  ) 

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  all_mse_estimates <-
    bind_rows(
      all_mse_estimates
      , loaded_estimates %>%
        purrr::map('Condition') %>%
        bind_rows() %>%
        mutate(across(everything(), as.character)) %>%
        mutate(
          Theta =
            loaded_estimates %>%
            purrr::map('Theta')
        ) %>%
        group_by(
          Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
        ) %>%
        mutate(
          Mean_MSE_Iteration = Theta %>% purrr::map(mse_estimator)
        ) %>%
        unnest_wider(Mean_MSE_Iteration) %>%
        mutate(
          Mean_MSE_Prox   = mean(prox_theta_est_MSE)
          , Mean_MSE_JMLE = mean(jmle_theta_est_MSE)
          , Mean_MSE_MMLE = mean(mmle_theta_est_MSE)
          , Mean_MSE_CMLE = mean(cmle_theta_est_MSE)
          , Mean_MSE_EAP  = mean(eap_theta_est_MSE)
          , SD_MSE_Prox   = sd(prox_theta_est_MSE)
          , SD_MSE_JMLE   = sd(jmle_theta_est_MSE)
          , SD_MSE_MMLE   = sd(mmle_theta_est_MSE)
          , SD_MSE_CMLE   = sd(cmle_theta_est_MSE)
          , SD_MSE_EAP    = sd(eap_theta_est_MSE)
        ) 
    )
}

all_mse_estimates %>%
  dplyr::select(contains("_est_")) %>%
  saveRDS("results/03_all_mse_estimates.RDS")

all_mse_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  saveRDS("results/03_mean_mse_by_condition.RDS")

all_mse_estimates %>%
  dplyr::select(contains("SD_")) %>%
  distinct() %>%
  saveRDS('results/03_se_mse_estimates.RDS')

```

### Root Mean Square Error
```{r rmse-estimates}
#| eval: false

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_rmse_estimates <-
  loaded_estimates %>%
  purrr::map('Condition') %>%
  bind_rows() %>%
  mutate(across(everything(), as.character)) %>%
  mutate(
    Theta =
      loaded_estimates %>%
      purrr::map('Theta')
  ) %>%
  group_by(
    Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
  ) %>%
  mutate(
    Mean_RMSE_Iteration = Theta %>% purrr::map(rmse_estimator)
    ) %>%
  unnest_wider(Mean_RMSE_Iteration) %>%
  mutate(
    Mean_RMSE_Prox   = mean(prox_theta_est_RMSE)
    , Mean_RMSE_JMLE = mean(jmle_theta_est_RMSE)
    , Mean_RMSE_MMLE = mean(mmle_theta_est_RMSE)
    , Mean_RMSE_CMLE = mean(cmle_theta_est_RMSE)
    , Mean_RMSE_EAP  = mean(eap_theta_est_RMSE)
    , SD_RMSE_Prox   = sd(prox_theta_est_RMSE)
    , SD_RMSE_JMLE   = sd(jmle_theta_est_RMSE)
    , SD_RMSE_MMLE   = sd(mmle_theta_est_RMSE)
    , SD_RMSE_CMLE   = sd(cmle_theta_est_RMSE)
    , SD_RMSE_EAP    = sd(eap_theta_est_RMSE)
  ) 

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  all_rmse_estimates <-
    bind_rows(
      all_rmse_estimates
      , loaded_estimates %>%
        purrr::map('Condition') %>%
        bind_rows() %>%
        mutate(across(everything(), as.character)) %>%
        mutate(
          Theta =
            loaded_estimates %>%
            purrr::map('Theta')
        ) %>%
        group_by(
          Title, ItemMean, ItemSD, PersonMean, PersonSD, N_Items, N_Person
        ) %>%
        mutate(
          Mean_RMSE_Iteration = Theta %>% purrr::map(rmse_estimator)
        ) %>%
        unnest_wider(Mean_RMSE_Iteration) %>%
        mutate(
          Mean_RMSE_Prox   = mean(prox_theta_est_RMSE)
          , Mean_RMSE_JMLE = mean(jmle_theta_est_RMSE)
          , Mean_RMSE_MMLE = mean(mmle_theta_est_RMSE)
          , Mean_RMSE_CMLE = mean(cmle_theta_est_RMSE)
          , Mean_RMSE_EAP  = mean(eap_theta_est_RMSE)
          , SD_RMSE_Prox   = sd(prox_theta_est_RMSE)
          , SD_RMSE_JMLE   = sd(jmle_theta_est_RMSE)
          , SD_RMSE_MMLE   = sd(mmle_theta_est_RMSE)
          , SD_RMSE_CMLE   = sd(cmle_theta_est_RMSE)
          , SD_RMSE_EAP    = sd(eap_theta_est_RMSE)
        ) 
    )
}

all_rmse_estimates %>%
  dplyr::select(contains("_est_")) %>%
  saveRDS("results/04_all_rmse_estimates.RDS")

all_rmse_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  saveRDS("results/04_mean_rmse_by_condition.RDS")

all_rmse_estimates %>%
  dplyr::select(contains("SD_")) %>%
  distinct() %>%
  saveRDS('results/04_se_rmse_estimates.RDS')

```

## Linear Models

### Bias

::: {.panel-tabset}

#### Anova

```{r bias-anova}
#| eval: true

all_bias_estimates <-
  readRDS(file = 'results/01_all_bias_estimates.RDS') 
mean_bias_estimates <-
  readRDS(file = 'results/01_mean_bias_by_condition.RDS')
se_bias_estimates <-
  readRDS(file = 'results/01_se_bias_estimates.RDS')
long_bias_estimates <-
  all_bias_estimates %>%
  pivot_longer(
    cols = contains('_bias')
    , names_to = 'method_'
    , values_to = 'bias'
  ) %>%
  mutate(
    method_ = str_remove(method_, '_theta_est_bias') |> factor(levels = c("prox", "jmle", "cmle", "eap"))
    , Item_and_Person_Params = paste0("ItemMean: ", ItemMean, " & PersonMean: ", PersonMean) |> factor()
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
    , N_Person = factor(N_Person, levels = c("1000", "500", "200", "100", "50", "25"))
    , Title = fct(Title, levels = title_factor)
  )

linear_model_bias <-
  lm(bias ~ (Title + N_Person + N_Items + method_)^4
     , data = long_bias_estimates #%>% filter((Title %in% c("Extreme Mismatch", "Large Mismatch", "Small Mismatch")))
     ) 

# linear_model_bias %>%
#   summary()
linear_model_bias %>%
  anova()
```

#### Model Fit Plot

```{r bias-fit-plot}
linear_model_bias %>%
  plot()
```

#### Regression 

```{r bias-regression-sjPlot}
linear_model_bias %>%
  sjPlot::tab_model(
    show.intercept = FALSE
    , show.reflvl = TRUE
  ) 
```

#### Mean Bias Plot by N_Items

```{r mean-bias-plot}
mean_bias_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  mutate(
    Title = fct(Title, levels = title_factor)
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
  ) %>%
  pivot_longer(
    cols = contains("_Bias")
    , values_to = "Bias"
    , names_to = "Estimation"
  ) %>%
  ggplot() +
  geom_bar(
    aes(y = Bias, x = Title, group = N_Items, fill = Estimation)
    , stat = 'identity'
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~ Estimation + N_Items, nrow = 5) + guides(fill="none")
```

:::

### MAD

::: {.panel-tabset}

#### Anova

```{r MAD-anova}
#| eval: true

all_MAD_estimates <-
  readRDS(file = 'results/02_all_mad_estimates.RDS') 
mean_MAD_estimates <-
  readRDS(file = 'results/02_mean_mad_by_condition.RDS')
se_MAD_estimates <-
  readRDS(file = 'results/02_se_mad_by_condition.RDS')
long_MAD_estimates <-
  all_MAD_estimates %>%
  pivot_longer(
    cols = contains('_MAD')
    , names_to = 'method_'
    , values_to = 'MAD'
  ) %>%
  mutate(
    method_ = str_remove(method_, '_theta_est_MAD') |> factor(levels = c("prox", "jmle", "cmle", "eap"))
    , Item_and_Person_Params = paste0("ItemMean: ", ItemMean, " & PersonMean: ", PersonMean) |> factor()
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
    , N_Person = factor(N_Person, levels = c("1000", "500", "200", "100", "50", "25"))
    , Title = fct(Title, levels = title_factor)
  )

linear_model_MAD <-
  lm(MAD ~ (Title + N_Person + N_Items + method_)^4
     , data = long_MAD_estimates #%>% filter((Title %in% c("Extreme Mismatch", "Large Mismatch", "Small Mismatch")))
     ) 

# linear_model_MAD %>%
#   summary()
linear_model_MAD %>%
  anova()
```

#### Model Fit Plot

```{r MAD-fit-plot}
linear_model_MAD %>%
  plot()
```

#### Regression 

```{r MAD-regression-sjPlot}
linear_model_MAD %>%
  sjPlot::tab_model(
    show.intercept = FALSE
    , show.reflvl = TRUE
  ) 
```

#### Mean MAD Plot by N_Items

```{r mean-MAD-plot}
mean_MAD_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  mutate(
    Title = fct(Title, levels = title_factor)
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
    ) %>%
  pivot_longer(
    cols = contains("_MAD_")
    , values_to = "MAD"
    , names_to = "Estimation"
  ) %>%
  ggplot() +
  geom_bar(
    aes(y = MAD, x = Title, group = N_Items, fill = Estimation)
    , stat = 'identity'
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~ Estimation + N_Items, nrow = 5) + guides(fill="none")

```

:::

### MSE

::: {.panel-tabset}

#### Anova

```{r MSE-anova}
#| eval: true

all_MSE_estimates <-
  readRDS(file = 'results/03_all_mse_estimates.RDS') 
mean_MSE_estimates <-
  readRDS(file = 'results/03_mean_mse_by_condition.RDS')
se_MSE_estimates <-
  readRDS(file = 'results/03_se_mse_estimates.RDS')
long_MSE_estimates <-
  all_MSE_estimates %>%
  pivot_longer(
    cols = contains('_MSE')
    , names_to = 'method_'
    , values_to = 'MSE'
  ) %>%
  mutate(
    method_ = str_remove(method_, '_theta_est_MSE') |> factor(levels = c("prox", "jmle", "cmle", "eap"))
    , Item_and_Person_Params = paste0("ItemMean: ", ItemMean, " & PersonMean: ", PersonMean) |> factor()
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
    , N_Person = factor(N_Person, levels = c("1000", "500", "200", "100", "50", "25"))
    , Title = fct(Title, levels = title_factor)
  )

linear_model_MSE <-
  lm(MSE ~ (Title + N_Person + N_Items + method_)^4
     , data = long_MSE_estimates #%>% filter((Title %in% c("Extreme Mismatch", "Large Mismatch", "Small Mismatch")))
     ) 

# linear_model_MSE %>%
#   summary()
linear_model_MSE %>%
  anova()
```

#### Model Fit Plot

```{r MSE-fit-plot}
linear_model_MSE %>%
  plot()
```

#### Regression 

```{r MSE-regression-sjPlot}
linear_model_MSE %>%
  sjPlot::tab_model(
    show.intercept = FALSE
    , show.reflvl = TRUE
  ) 
```

#### Mean MSE Plot by N_Items

```{r mean-MSE-plot}

mean_MSE_estimates %>%
  dplyr::select(contains("Mean_")) %>%
  distinct() %>%
  mutate(
    Title = fct(Title, levels = title_factor)
    , N_Items = factor(N_Items, levels = c("200", "150", "100"))
    ) %>%
  pivot_longer(
    cols = contains("_MSE_")
    , values_to = "MSE"
    , names_to = "Estimation"
  ) %>%
  ggplot() +
  geom_bar(
    aes(y = MSE, x = Title, group = N_Items, fill = Estimation)
    , stat = 'identity'
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~ Estimation + N_Items, nrow = 5) + guides(fill="none")
```

:::