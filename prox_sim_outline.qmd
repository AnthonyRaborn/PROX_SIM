---
title: "PROX Simulation Specs"
format: html
editor_options: 
  chunk_output_type: console
---

## PROX Simulation Outline

This simulation will compare the recovery of simulated ability parameters using different ability estimation functions with fixed item parameter estimates. The PROX method [@cohen1972] will be compared to:

-   Joint Maximum Likelihood Estimation (JMLE; TAM package) *Can use fixed item parameters*
-   Marginal Maximum Likelihood Estimation (MMLE; TAM or ltm package) *TAM uses EAP after MMLE*
-   Conditional Maximum Likelihood Estimation (CMLE; eRm package) *Can't use fixed item parameters, takes magnitudes longer than the other methods (\~2 minutes in condition 1)*
-   Expected a Posteriori estimator (EAP; irtoys package) *Uses LTM as the backend, can use fixed item parameters*

The comparisons between these estimation methods will look at different distributions of person abilities and different sample sizes of responses. The different levels of these factors are:

-   Parameter Distributions:
    -   Both items and persons: A standard normal distribution, $\theta \sim \mathcal{N}(\mu = 0, \sigma^2 = 1)$

    -   Both items and persons: $\theta \sim \mathcal{N}(0, 2)$

    -   Items = $\theta \sim \mathcal{N}(-1, 1)$ and Persons = $\theta \sim \mathcal{N}(1, 1)$

    -   Items = $\theta \sim \mathcal{N}(-2, 1)$ and Persons = $\theta \sim \mathcal{N}(2, 1)$

    -   Items = $\theta \sim \mathcal{N}(-3, 1)$ and Persons = $\theta \sim \mathcal{N}(3, 1)$

    -   Items = $\theta \sim \mathcal{N}(0, 1)$ and Persons = bimodal mixture distribution with equal $\sigma^2 = 0.5$ and modes $\mathcal{Mo}_1 = -1.5$ and $\mathcal{Mo}_2 = 1.5$
-   Person Sample sizes:
    -   $n = 25$
    -   $n = 50$
    -   $n = 100$
    -   $n = 200$
    -   $n = 500$
    -   $n = 1000$

Here is a table of each condition label and its parameter values.

```{r}
require(tidyverse)
person_sample_sizes = c(25, 50, 100, 200, 500, 1000)
parameter_distribution_condition = c("Standard Normal", "Wide Normal", "-1 Item Diff, +1 Person Theta", "-2 Item Diff, +2 Person Theta", "-3 Item Diff, +3 Person Theta", "Normal Items, Bimodal Persons")

conditions = expand.grid(person_sample_sizes, parameter_distribution_condition)
conditions = cbind(paste0("Condition ", 1:nrow(conditions)), conditions)
conditions = conditions[, c(1, 3, 2)]
colnames(conditions) = c("Condition", "Item_and_Person_Params", "N")

conditions =
  conditions %>%
  mutate(
    Condition = 
      case_when(
        grepl(" [0-9]{1}$", Condition) ~ str_replace(Condition, "Condition ", "Condition 0")
    , TRUE ~ Condition
    )
  )
knitr::kable(conditions, col.names = c("Condition", "Item/Person Parameters", "Number of Persons"))

conditions <- 
  conditions %>% 
  mutate(
    filename = 
      Condition %>%
      tolower() %>%
      str_replace(" ", "_") %>%
      str_replace("_0", "_") %>%
      paste0("_estimates.RDS")
    )

conditions %>%
  saveRDS("results/conditions.RDS")
```

## Creating the data

The following code chunk provides some setup for the simulation. It loads the required packages and defines functions to simulate the response data for analysis.

```{r setup}
require(TAM)
require(eRm)
require(irtoys)

iter = 100
person_sample_sizes = c(25, 50, 100, 200, 500, 1000)

rasch_response_sim = function(person_theta_value, item_diff_value) {
  resp_prob = exp(person_theta_value - item_diff_value) / (1 + exp(person_theta_value - item_diff_value))
  response = ifelse(
    test = runif(n = length(resp_prob)) <= resp_prob,
    yes = 1,
    no = 0)
  return(response)
}
prox_estimate = function(mean_item_diff, sd_item_diff, observed_raw_score, maximum_score) {
  estimate <-
    mean_item_diff + 
    sqrt(1 + sd_item_diff/2.9) * 
    log(observed_raw_score/(maximum_score - observed_raw_score))
  if (estimate = Inf) {
    estimate = 4
  } else if (estimate = -Inf) {
    estimate = -4
  }
  estimate
}

eRm_person_estimate <- function(response_matrix) {
  output <-
    tryCatch(
      expr = eRm::person.parameter(eRm::RM(response_matrix))$theta.table$`Person Parameter`
      , error = function(e) {
        columns_to_remove <-
          stringr::str_extract_all(as.character(e)
                                 , pattern = "[I][0-9]{1,3}"
                                 , simplify = TRUE) |>
          stringr::str_remove(pattern = "I") |>
          as.numeric()
      }
      , finally = function(response_matrix, columns_to_remove) {
        new_responses <- response_matrix[,-columns_to_remove]
        return(eRm::person.parameter(eRm::RM(response_matrix))$theta.table$`Person Parameter`)
      }
    )
  output
}


eRm_person_estimate <- function(response_matrix) {
  if (
    class(
      try(eRm::person.parameter(eRm::RM(response_matrix))$theta.table$`Person Parameter`
          , silent = TRUE)
      ) == 'try-error'
  ) {
    columns_to_remove <-
      tryCatch(
        expr = eRm::person.parameter(eRm::RM(response_matrix))$theta.table$`Person Parameter`
        , error = function(e) {
          columns_to_remove <-
            stringr::str_extract_all(as.character(e)
                                   , pattern = "[I][0-9]{1,3}"
                                   , simplify = TRUE) |>
            stringr::str_remove(pattern = "I") |>
            as.numeric()
        }
      ) 
    new_responses <- response_matrix[,-columns_to_remove]
    return(eRm::person.parameter(eRm::RM(new_responses))$theta.table$`Person Parameter`)
  } else {
    return(eRm::person.parameter(eRm::RM(response_matrix))$theta.table$`Person Parameter`)
  }
}

options('warn' = 2)
```

Then, for each condition, we create the simulated item and person parameters and use the different estimation methods to estimate the person parameters based on the simulated data.

For PROX, a custom function using the formula [given on the Winsteps website](https://www.winsteps.com/winman/iterations.htm) was implemented.

For JMLE, the `tam.jml` function accepts the matrix of responses and, optionally, a matrix of item numbers (first column) and item difficulties (second column) to use as fixed values. This puts the focus on the *person parameter estimates* which is what we want for our simulation. The `$theta` element of the resulting list holds the estimated person parameters. Since the function does not automatically remove items with no correct responses, the simulation automatically removes these items (if they exist in the given iteration) and estimates person parameters based on the remaining items.

<!-- For MMLE, the `tam.mml` function behaves similarly. The output is different, however; we need to access `$person$EAP` to get the person theta estimates using the expected a posteriori of the marginal maximum likelihood estimator. Since some items may normally be removed due to the number of correct responses, we also specify `item.elim = FALSE` to keep these items in the analysis. -->
<!-- I forgot to actually include the mml EAP estimates in the final results, d'oh! -->

For CMLE, the `eRm::RM` function takes the scored matrix and estimates the full model (item and person parameters) "simultaneously", so we can't provide the known item difficulties for this procedure. We also need to extract the person theta estimates with the `eRm::person.parameter` function, accessing the stored estimates in the output with `$theta.table$'Person Parameter'`. This does mean the CMLE estimates are not strictly comparable and may have additional estimation discrepancies. As the `eRm` package sometimes has issues with all correct/all incorrect response patterns, there is a wrapper function implemented that removes problematic items from the scored matrix when `eRm` throws an error and reruns the estimation process.

For EAP, the `irtoys` package provides an `eap()` estimator in the `ability()` function that can utilize the known item parameters. The first column of resulting matrix provides the ability estimates for each provided response pattern in the scoring matrix. Under the hood, it uses the `ltm` package by default.   

### Standard Normal

```{r condition-1}
#| eval: false
# Condition 1 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[1]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1
estimates_file_name = 'simdata/condition_1_estimates.RDS'
responses_file_name = 'simdata/condition_1_responses.RDS'

condition_1_estimates = vector(mode = 'list', length = iter)
condition_1_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_1_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_1_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_1_estimates, file = estimates_file_name)
saveRDS(condition_1_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-2}
#| eval: false
# Condition 2 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_2_estimates.RDS'
responses_file_name = 'simdata/condition_2_responses.RDS'

condition_2_estimates = vector(mode = 'list', length = iter)
condition_2_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
    ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_2_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_2_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_2_estimates, file = estimates_file_name)
saveRDS(condition_2_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-3}
#| eval: false
# Condition 3 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_3_estimates.RDS'
responses_file_name = 'simdata/condition_3_responses.RDS'

condition_3_estimates = vector(mode = 'list', length = iter)
condition_3_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_3_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_3_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_3_estimates, file = estimates_file_name)
saveRDS(condition_3_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-4}
#| eval: false
# Condition 4 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_4_estimates.RDS'
responses_file_name = 'simdata/condition_4_responses.RDS'

condition_4_estimates = vector(mode = 'list', length = iter)
condition_4_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_4_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_4_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_4_estimates, file = estimates_file_name)
saveRDS(condition_4_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-5}
#| eval: false
# Condition 5 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_5_estimates.RDS'
responses_file_name = 'simdata/condition_5_responses.RDS'

condition_5_estimates = vector(mode = 'list', length = iter)
condition_5_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_5_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_5_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_5_estimates, file = estimates_file_name)
saveRDS(condition_5_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-6}
#| eval: false
# Condition 6 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_6_estimates.RDS'
responses_file_name = 'simdata/condition_6_responses.RDS'

condition_6_estimates = vector(mode = 'list', length = iter)
condition_6_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_6_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_6_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_6_estimates, file = estimates_file_name)
saveRDS(condition_6_responses, file = responses_file_name)

Sys.time() - Start.time
```

### Wide Normal

```{r condition-7}
#| eval: false
# Condition 7 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[1]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2
estimates_file_name = 'simdata/condition_7_estimates.RDS'
responses_file_name = 'simdata/condition_7_responses.RDS'

condition_7_estimates = vector(mode = 'list', length = iter)
condition_7_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_7_estimates[[i]] = thetas
  condition_7_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_7_estimates, file = estimates_file_name)
saveRDS(condition_7_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-8}
#| eval: false
# Condition 8 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2

estimates_file_name = 'simdata/condition_8_estimates.RDS'
responses_file_name = 'simdata/condition_8_responses.RDS'

condition_8_estimates = vector(mode = 'list', length = iter)
condition_8_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_8_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_8_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_8_estimates, file = estimates_file_name)
saveRDS(condition_8_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-9}
#| eval: false
# Condition 9 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2

estimates_file_name = 'simdata/condition_9_estimates.RDS'
responses_file_name = 'simdata/condition_9_responses.RDS'

condition_9_estimates = vector(mode = 'list', length = iter)
condition_9_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_9_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_9_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_9_estimates, file = estimates_file_name)
saveRDS(condition_9_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-10}
#| eval: false
# Condition 10 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2

estimates_file_name = 'simdata/condition_10_estimates.RDS'
responses_file_name = 'simdata/condition_10_responses.RDS'

condition_10_estimates = vector(mode = 'list', length = iter)
condition_10_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_10_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_10_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_10_estimates, file = estimates_file_name)
saveRDS(condition_10_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-11}
#| eval: false
# Condition 11 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2

estimates_file_name = 'simdata/condition_11_estimates.RDS'
responses_file_name = 'simdata/condition_11_responses.RDS'

condition_11_estimates = vector(mode = 'list', length = iter)
condition_11_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_11_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_11_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_11_estimates, file = estimates_file_name)
saveRDS(condition_11_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-12}
#| eval: false
# Condition 12 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = m_person = 0
sd_item = sd_person = 2

estimates_file_name = 'simdata/condition_12_estimates.RDS'
responses_file_name = 'simdata/condition_12_responses.RDS'

condition_12_estimates = vector(mode = 'list', length = iter)
condition_12_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_12_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_12_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_12_estimates, file = estimates_file_name)
saveRDS(condition_12_responses, file = responses_file_name)

Sys.time() - Start.time
```

### -1 Item +1 Theta

```{r condition-13}
#| eval: false
# Condition 13 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[1]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1
estimates_file_name = 'simdata/condition_13_estimates.RDS'
responses_file_name = 'simdata/condition_13_responses.RDS'

condition_13_estimates = vector(mode = 'list', length = iter)
condition_13_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_13_estimates[[i]] = thetas
  condition_13_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_13_estimates, file = estimates_file_name)
saveRDS(condition_13_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-14}
#| eval: false
# Condition 14 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_14_estimates.RDS'
responses_file_name = 'simdata/condition_14_responses.RDS'

condition_14_estimates = vector(mode = 'list', length = iter)
condition_14_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_14_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_14_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_14_estimates, file = estimates_file_name)
saveRDS(condition_14_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-15}
#| eval: false
# Condition 15 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_15_estimates.RDS'
responses_file_name = 'simdata/condition_15_responses.RDS'

condition_15_estimates = vector(mode = 'list', length = iter)
condition_15_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_15_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_15_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_15_estimates, file = estimates_file_name)
saveRDS(condition_15_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-16}
#| eval: false
# Condition 16 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_16_estimates.RDS'
responses_file_name = 'simdata/condition_16_responses.RDS'

condition_16_estimates = vector(mode = 'list', length = iter)
condition_16_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_16_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_16_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_16_estimates, file = estimates_file_name)
saveRDS(condition_16_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-17}
#| eval: false
# Condition 17 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_17_estimates.RDS'
responses_file_name = 'simdata/condition_17_responses.RDS'

condition_17_estimates = vector(mode = 'list', length = iter)
condition_17_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_17_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_17_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_17_estimates, file = estimates_file_name)
saveRDS(condition_17_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-18}
#| eval: false
# Condition 18 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = -1; m_person = 1
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_18_estimates.RDS'
responses_file_name = 'simdata/condition_18_responses.RDS'

condition_18_estimates = vector(mode = 'list', length = iter)
condition_18_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_18_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_18_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_18_estimates, file = estimates_file_name)
saveRDS(condition_18_responses, file = responses_file_name)

Sys.time() - Start.time
```

### -2 Item +2 Theta

```{r condition-19}
#| eval: false
# Condition 19 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[1]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1
estimates_file_name = 'simdata/condition_19_estimates.RDS'
responses_file_name = 'simdata/condition_19_responses.RDS'

condition_19_estimates = vector(mode = 'list', length = iter)
condition_19_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_19_estimates[[i]] = thetas
  condition_19_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_19_estimates, file = estimates_file_name)
saveRDS(condition_19_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-20}
#| eval: false
# Condition 20 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_20_estimates.RDS'
responses_file_name = 'simdata/condition_20_responses.RDS'

condition_20_estimates = vector(mode = 'list', length = iter)
condition_20_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_20_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_20_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_20_estimates, file = estimates_file_name)
saveRDS(condition_20_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-21}
#| eval: false
# Condition 21 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_21_estimates.RDS'
responses_file_name = 'simdata/condition_21_responses.RDS'

condition_21_estimates = vector(mode = 'list', length = iter)
condition_21_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_21_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_21_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_21_estimates, file = estimates_file_name)
saveRDS(condition_21_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-22}
#| eval: false
# Condition 22 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_22_estimates.RDS'
responses_file_name = 'simdata/condition_22_responses.RDS'

condition_22_estimates = vector(mode = 'list', length = iter)
condition_22_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_22_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_22_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_22_estimates, file = estimates_file_name)
saveRDS(condition_22_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-23}
#| eval: false
# Condition 23 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_23_estimates.RDS'
responses_file_name = 'simdata/condition_23_responses.RDS'

condition_23_estimates = vector(mode = 'list', length = iter)
condition_23_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_23_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_23_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_23_estimates, file = estimates_file_name)
saveRDS(condition_23_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-24}
#| eval: false
# Condition 24 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = -2; m_person = 2
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_24_estimates.RDS'
responses_file_name = 'simdata/condition_24_responses.RDS'

condition_24_estimates = vector(mode = 'list', length = iter)
condition_24_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_24_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_24_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_24_estimates, file = estimates_file_name)
saveRDS(condition_24_responses, file = responses_file_name)

Sys.time() - Start.time
```

### -3 Item +3 Theta

```{r condition-25}
#| eval: false
# Condition 25 Parameters
Start.time = Sys.time()

Start.time = Sys.time()
n_person = person_sample_sizes[1]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1
estimates_file_name = 'simdata/condition_25_estimates.RDS'
responses_file_name = 'simdata/condition_25_responses.RDS'

condition_25_estimates = vector(mode = 'list', length = iter)
condition_25_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_25_estimates[[i]] = thetas
  condition_25_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_25_estimates, file = estimates_file_name)
saveRDS(condition_25_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-26}
#| eval: false
# Condition 26 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_26_estimates.RDS'
responses_file_name = 'simdata/condition_26_responses.RDS'

condition_26_estimates = vector(mode = 'list', length = iter)
condition_26_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_26_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_26_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_26_estimates, file = estimates_file_name)
saveRDS(condition_26_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-27}
#| eval: false
# Condition 27 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_27_estimates.RDS'
responses_file_name = 'simdata/condition_27_responses.RDS'

condition_27_estimates = vector(mode = 'list', length = iter)
condition_27_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_27_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_27_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_27_estimates, file = estimates_file_name)
saveRDS(condition_27_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-28}
#| eval: false
# Condition 28 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_28_estimates.RDS'
responses_file_name = 'simdata/condition_28_responses.RDS'

condition_28_estimates = vector(mode = 'list', length = iter)
condition_28_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_28_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_28_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_28_estimates, file = estimates_file_name)
saveRDS(condition_28_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-29}
#| eval: false
# Condition 29 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_29_estimates.RDS'
responses_file_name = 'simdata/condition_29_responses.RDS'

condition_29_estimates = vector(mode = 'list', length = iter)
condition_29_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_29_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_29_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_29_estimates, file = estimates_file_name)
saveRDS(condition_29_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-30}
#| eval: false
# Condition 30 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = -3; m_person = 3
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_30_estimates.RDS'
responses_file_name = 'simdata/condition_30_responses.RDS'

condition_30_estimates = vector(mode = 'list', length = iter)
condition_30_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_30_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_30_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_30_estimates, file = estimates_file_name)
saveRDS(condition_30_responses, file = responses_file_name)

Sys.time() - Start.time
```

### Normal Item, Bimodal Theta

```{r condition-31}
#| eval: false
# Condition 31 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[1]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1
estimates_file_name = 'simdata/condition_31_estimates.RDS'
responses_file_name = 'simdata/condition_31_responses.RDS'

condition_31_estimates = vector(mode = 'list', length = iter)
condition_31_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_31_estimates[[i]] = thetas
  condition_31_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_31_estimates, file = estimates_file_name)
saveRDS(condition_31_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-32}
#| eval: false
# Condition 32 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[2]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_32_estimates.RDS'
responses_file_name = 'simdata/condition_32_responses.RDS'

condition_32_estimates = vector(mode = 'list', length = iter)
condition_32_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_32_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_32_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_32_estimates, file = estimates_file_name)
saveRDS(condition_32_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-33}
#| eval: false
# Condition 33 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[3]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_33_estimates.RDS'
responses_file_name = 'simdata/condition_33_responses.RDS'

condition_33_estimates = vector(mode = 'list', length = iter)
condition_33_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_33_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_33_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_33_estimates, file = estimates_file_name)
saveRDS(condition_33_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-34}
#| eval: false
# Condition 34 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[4]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_34_estimates.RDS'
responses_file_name = 'simdata/condition_34_responses.RDS'

condition_34_estimates = vector(mode = 'list', length = iter)
condition_34_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_34_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_34_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_34_estimates, file = estimates_file_name)
saveRDS(condition_34_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-35}
#| eval: false
# Condition 35 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[5]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_35_estimates.RDS'
responses_file_name = 'simdata/condition_35_responses.RDS'

condition_35_estimates = vector(mode = 'list', length = iter)
condition_35_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_35_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_35_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_35_estimates, file = estimates_file_name)
saveRDS(condition_35_responses, file = responses_file_name)

Sys.time() - Start.time
```

```{r condition-36}
#| eval: false
# Condition 36 Parameters
Start.time = Sys.time()

n_person = person_sample_sizes[6]
n_item = 200
m_item = 0; m_person = c(-1.5, 1.5)
sd_item = sd_person = 1

estimates_file_name = 'simdata/condition_36_estimates.RDS'
responses_file_name = 'simdata/condition_36_responses.RDS'

condition_36_estimates = vector(mode = 'list', length = iter)
condition_36_responses = vector(mode = 'list', length = iter)

for (i in 1:iter) {
  item_diff = round(rnorm(n = n_item, mean = m_item, sd = sd_item), 3)
  person_theta = rnorm(n = n_person, mean = m_person, sd = sd_person)
  
  responses = matrix(nrow = n_person, ncol = n_item)
  
  for (p in 1:n_person) {
    responses[p, ] = rasch_response_sim(person_theta[p], item_diff)
  }
  
  zero_correct_items = which(colSums(responses) == 0 | colSums(responses) == n_person)
  if (length(zero_correct_items) > 0) {
    modified_responses = responses[,-zero_correct_items]
    modified_item_diff = item_diff[-zero_correct_items]
  } else {
    modified_responses = responses
    modified_item_diff = item_diff

  }
  
  prox_theta_est = prox_estimate(mean(item_diff), sd(item_diff), rowSums(responses), n_item)
  jmle_theta_est = TAM::tam.jml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), verbose = FALSE)$theta
  mmle_theta_est = TAM::tam.mml(modified_responses, xsi.fixed = cbind(1:length(modified_item_diff), modified_item_diff), item.elim = FALSE, verbose = FALSE)$person$EAP
  cmle_theta_est = eRm_person_estimate(modified_responses)
  eap_theta_est  = 
    irtoys::ability(
      resp = modified_responses,
      ip = list('est' = cbind(1, modified_item_diff, 0, deparse.level = 0)),
      method = 'EAP'
    )[,1]
  
  thetas = cbind(person_theta, prox_theta_est, jmle_theta_est, cmle_theta_est, eap_theta_est)
  
  condition_36_estimates[[i]] = list("thetas" = thetas, "item_diff" = item_diff)
  condition_36_responses[[i]] = list(item_diff, responses)

}

saveRDS(condition_36_estimates, file = estimates_file_name)
saveRDS(condition_36_responses, file = responses_file_name)

Sys.time() - Start.time
```

## Analyzing the data

"Point-Estimate" methods to analyze the data:

  1. Correlation between true and estimated theta
  2. (Mean) Bias
  3. Mean Absolute Difference
  4. Mean Square Error
  5. Root Mean Square Error
  
done for each iteration of each condition. Then, these estimates can be averaged and a standard error of each measure calculated.

Using the "point estimate" for each condition as the DV, an ANOVA/LR can be used with the condition variables as IVs.

## Correlation

```{r correlation-between-estimates}
mean_corr_list <- function(x) {
  Reduce("+", x) / length(x)
}

estimates_files_list <-
  paste0('simdata/', conditions$filename)
# short_file <-
#   list.files('simdata/', pattern = 'estimates')

loaded_estimates <-
  readRDS(estimates_files_list[1])

mean_correlation <-
  loaded_estimates %>%
  purrr::map('thetas') %>%
  purrr::map(cor) %>%
  mean_corr_list() %>% 
  as_tibble() %>%
  mutate(Condition = conditions$Condition[1], .before = 1) %>%
  mutate(Estimate = c("person_theta", "prox_theta_est", "jmle_theta_est", "cmle_theta_est", "eap_theat_est"), .after = 1) 

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  test <-
    tryCatch(
      loaded_estimates %>%
        purrr::map('thetas') %>%
        purrr::map(as_tibble) %>%
        purrr::map(~.x %>% mutate_all(~ case_when((. == -Inf)|(is.na(.) & (sign(person_theta) == -1)) ~ -4, (. == Inf)|(is.na(.) & (sign(person_theta) == 1)) ~ 4, TRUE ~ .))) %>%
        purrr::map(cor) %>%
        mean_corr_list() %>% 
        as_tibble() %>%
        mutate(Condition = conditions$Condition[i], .before = 1) %>%
        mutate(Estimate = c("person_theta", "prox_theta_est", "jmle_theta_est", "cmle_theta_est", "eap_theat_est"), .after = 1)
        ,
      error = function(e)
        'error'
    )
  if ('tbl' %in% class(test)) {
    mean_correlation <-
      mean_correlation %>%
      bind_rows(
        test
      )
  } else
    if (test == 'error') {
    mean_correlation <-
      mean_correlation %>%
      bind_rows(
        loaded_estimates %>%
          purrr::map(as_tibble) %>%
          purrr::map(~.x %>% mutate_all(~ case_when((. == -Inf)|(is.na(.) & (sign(person_theta) == -1)) ~ -4, (. == Inf)|(is.na(.) & (sign(person_theta) == 1)) ~ 4, TRUE ~ .))) %>%
          purrr::map(cor) %>%
          mean_corr_list() %>%
          as_tibble() %>%
          mutate(Condition = conditions$Condition[i], .before = 1) %>%
          mutate(Estimate = c("person_theta", "prox_theta_est", "jmle_theta_est", "cmle_theta_est", "eap_theat_est"), .after = 1)
      )
  } else {
    stop("Something went wrong.")
  }
}

mean_correlation %>%
  select(-person_theta) %>%
  saveRDS('results/00_mean_correlation.RDS')
```
## "Point-Estimate"
### "Point-Estimate" functions
```{r analysis-critera-function}
bias_estimator = function(data) {
  true_theta = data[,1]
  bias = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 4 ~ 4
          , prox_theta_est == -Inf | prox_theta_est < -4 ~ -4
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 4 ~ 4
          , cmle_theta_est == -Inf | cmle_theta_est < -4 ~ -4
        )
    ) 
  
  for (i in 2:ncol(data)) {
    numerator = sum(data[,i] - true_theta)
    
    bias_est = numerator / length(true_theta)
    
    bias = c(bias, bias_est)
  }
  names(bias) = paste0(colnames(data)[-1], "_bias")
  
  return(bias)
}

mad_estimator = function(data) {
  true_theta = data[,1]
  mad = c()
  
    data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 4 ~ 4
          , prox_theta_est == -Inf | prox_theta_est < -4 ~ -4
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 4 ~ 4
          , cmle_theta_est == -Inf | cmle_theta_est < -4 ~ -4
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 4 ~ 4
          , jmle_theta_est == -Inf | jmle_theta_est < -4 ~ -4
          , TRUE ~ jmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 4 ~ 4
          , eap_theta_est == -Inf | eap_theta_est < -4 ~ -4
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum(abs(data[,i] - true_theta))
    mad_est = numerator / (length(true_theta) - 1)
    
    mad = c(mad, mad_est)
  }
  names(mad) = paste0(colnames(data)[-1], "_mad")
  return(mad)
}

mse_estimator = function(data) {
  true_theta = data[,1]
  mse = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 4 ~ 4
          , prox_theta_est == -Inf | prox_theta_est < -4 ~ -4
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 4 ~ 4
          , cmle_theta_est == -Inf | cmle_theta_est < -4 ~ -4
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 4 ~ 4
          , jmle_theta_est == -Inf | jmle_theta_est < -4 ~ -4
          , TRUE ~ jmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 4 ~ 4
          , eap_theta_est == -Inf | eap_theta_est < -4 ~ -4
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum((data[,i] - true_theta)^2)
    mse_est = numerator / (length(true_theta) - 1)
    
    mse = c(mse, mse_est)
  }
  
  names(mse) = paste0(colnames(data)[-1], "_mse")
  
  return(mse)
}

rmse_estimator = function(data) {
  true_theta = data[,1]
  rmse = c()
  
  data <- 
    data %>%
    as_tibble() %>%
    mutate(
      prox_theta_est =
        case_when(
          prox_theta_est == Inf | prox_theta_est > 4 ~ 4
          , prox_theta_est == -Inf | prox_theta_est < -4 ~ -4
          , TRUE ~ prox_theta_est
        )
      , cmle_theta_est =
        case_when(
          cmle_theta_est == Inf | cmle_theta_est > 4 ~ 4
          , cmle_theta_est == -Inf | cmle_theta_est < -4 ~ -4
          , TRUE ~ cmle_theta_est
        )
      , jmle_theta_est =
        case_when(
          jmle_theta_est == Inf | jmle_theta_est > 4 ~ 4
          , jmle_theta_est == -Inf | jmle_theta_est < -4 ~ -4
          , TRUE ~ jmle_theta_est
        )
      , eap_theta_est =
        case_when(
          eap_theta_est == Inf | eap_theta_est > 4 ~ 4
          , eap_theta_est == -Inf | eap_theta_est < -4 ~ -4
          , TRUE ~ eap_theta_est
        )
    ) 

  for (i in 2:ncol(data)) {
    numerator = sum((data[,i] - true_theta)^2)
    rmse_est = sqrt(numerator / (length(true_theta) - 1))
    
    rmse = c(rmse, rmse_est)
  }
  
  names(rmse) = paste0(colnames(data)[-1], "_rmse")

  return(rmse)
}

se_estimator = function(data) { # not vectorized like the others
  mean_est = mean(data, na.rm = TRUE)
  n = sum(!is.na(data))
  
  data_clean <- data[!is.na(data)]
  numerator = sum((data_clean - mean_est)^2)
  se_est = sqrt(numerator / (n - 1))
  
  return(se_est)
}

conditions <-
  readRDS("results/conditions.RDS")
```

### Mean Bias
```{r bias-estimates}

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_bias_estimates <-
  loaded_estimates %>%
  purrr::map('thetas') %>%
  purrr::map(bias_estimator) %>% 
  bind_rows() %>%
  mutate(filename = estimates_files_list[1] %>% str_remove("simdata/")) %>% 
  left_join(conditions)

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  test <-
    tryCatch(
      purrr:::map(loaded_estimates, 'thetas') %>%
        purrr::map(bias_estimator)
        ,
      error = function(e)
        'error'
    )
  if (class(test) == 'list') {
    all_bias_estimates <-
      all_bias_estimates %>%
      bind_rows(
        purrr::map(loaded_estimates, 'thetas') %>%
          purrr::map(bias_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else if (test == 'error') {
    all_bias_estimates <-
      all_bias_estimates %>%
      bind_rows(
        loaded_estimates %>%   
          purrr:::map(bias_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else {
    stop("Something went wrong.")
  }
  
}

mean_bias_by_condition <-
  all_bias_estimates %>% 
  group_by(Condition) %>% 
  summarize(
    across(contains("_bias"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_bias"), \(x) mean(x, na.rm = TRUE), .names = "mean_{.col}")
            ) %>%
  select(-contains("mean_n_"))

se_bias_by_condition <-
  all_bias_estimates %>%
  group_by(Condition) %>%
  summarize(
    across(contains("_bias"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_bias"), \(x) se_estimator(x), .names = "se_{.col}")
  ) %>%
  select(-contains("se_n_"))
  

all_bias_estimates %>%
  saveRDS("results/01_all_bias_estimates.RDS")

mean_bias_by_condition %>%
  saveRDS("results/01_mean_bias_by_condition.RDS")

se_bias_by_condition %>%
  saveRDS('results/01_se_bias_estimates.RDS')

```

### Mean Absolute Difference
```{r mad-estimates}
loaded_estimates <-
  readRDS(estimates_files_list[1])

all_mad_estimates <-
  loaded_estimates %>%
  purrr::map('thetas') %>%
  purrr::map(mad_estimator) %>% 
  bind_rows() %>%
  mutate(filename = estimates_files_list[1] %>% str_remove("simdata/")) %>% 
  left_join(conditions)

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  test <-
    tryCatch(
      purrr:::map(loaded_estimates, 'thetas') %>%
        purrr::map(mad_estimator)
        ,
      error = function(e)
        'error'
    )
  if (class(test) == 'list') {
    all_mad_estimates <-
      all_mad_estimates %>%
      bind_rows(
        purrr::map(loaded_estimates, 'thetas') %>%
          purrr::map(mad_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else if (test == 'error') {
    all_mad_estimates <-
      all_mad_estimates %>%
      bind_rows(
        loaded_estimates %>%   
          purrr:::map(mad_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else {
    stop("Something went wrong.")
  }
  
}

mean_mad_by_condition <-
  all_mad_estimates %>% 
  group_by(Condition) %>% 
  summarize(
    across(contains("_mad"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_mad"), \(x) mean(x, na.rm = TRUE), .names = "mean_{.col}")
            ) %>%
  select(-contains("mean_n_"))

se_mad_by_condition <-
  all_mad_estimates %>%
  group_by(Condition) %>%
  summarize(
    across(contains("_mad"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_mad"), \(x) se_estimator(x), .names = "se_{.col}")
  ) %>%
  select(-contains("se_n_"))


all_mad_estimates %>%
  saveRDS("results/02_all_mad_estimates.RDS")

mean_mad_by_condition %>%
  saveRDS("results/02_mean_mad_by_condition.RDS")

se_mad_by_condition %>%
  saveRDS("results/02_se_mad_by_condition.RDS")
```

### Mean Square Error
```{r mse-estimates}
loaded_estimates <-
  readRDS(estimates_files_list[1])

all_mse_estimates <-
  loaded_estimates %>%
  purrr::map('thetas') %>%
  purrr::map(mse_estimator) %>% 
  bind_rows() %>%
  mutate(filename = estimates_files_list[1] %>% str_remove("simdata/")) %>% 
  left_join(conditions)

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  test <-
    tryCatch(
      purrr:::map(loaded_estimates, 'thetas') %>%
        purrr::map(mse_estimator)
        ,
      error = function(e)
        'error'
    )
  if (class(test) == 'list') {
    all_mse_estimates <-
      all_mse_estimates %>%
      bind_rows(
        purrr::map(loaded_estimates, 'thetas') %>%
          purrr::map(mse_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else if (test == 'error') {
    all_mse_estimates <-
      all_mse_estimates %>%
      bind_rows(
        loaded_estimates %>%   
          purrr:::map(mse_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else {
    stop("Something went wrong.")
  }
  
}

mean_mse_by_condition <-
  all_mse_estimates %>% 
  group_by(Condition) %>% 
  summarize(
    across(contains("_mse"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_mse"), \(x) mean(x, na.rm = TRUE), .names = "mean_{.col}")
            ) %>%
  select(-contains("mean_n_"))

se_mse_by_condition <-
  all_mse_estimates %>%
  group_by(Condition) %>%
  summarize(
    across(contains("_mse"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_mse"), \(x) se_estimator(x), .names = "se_{.col}")
  ) %>%
  select(-contains("se_n_"))
  

all_mse_estimates %>%
  saveRDS("results/03_all_mse_estimates.RDS")

mean_mse_by_condition %>%
  saveRDS("results/03_mean_mse_by_condition.RDS")

se_mse_by_condition %>%
  saveRDS('results/03_se_mse_estimates.RDS')

```

### Root Mean Square Error
```{r rmse-estimates}

loaded_estimates <-
  readRDS(estimates_files_list[1])

all_rmse_estimates <-
  loaded_estimates %>%
  purrr::map('thetas') %>%
  purrr::map(rmse_estimator) %>% 
  bind_rows() %>%
  mutate(filename = estimates_files_list[1] %>% str_remove("simdata/")) %>% 
  left_join(conditions)

for (i in 2:length(estimates_files_list)) {
  loaded_estimates <-
    readRDS(estimates_files_list[i])
  test <-
    tryCatch(
      purrr:::map(loaded_estimates, 'thetas') %>%
        purrr::map(rmse_estimator)
        ,
      error = function(e)
        'error'
    )
  if (class(test) == 'list') {
    all_rmse_estimates <-
      all_rmse_estimates %>%
      bind_rows(
        purrr::map(loaded_estimates, 'thetas') %>%
          purrr::map(rmse_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else if (test == 'error') {
    all_rmse_estimates <-
      all_rmse_estimates %>%
      bind_rows(
        loaded_estimates %>%   
          purrr:::map(rmse_estimator) %>%
          bind_rows() %>%
          mutate(filename = estimates_files_list[i] %>% str_remove("simdata/")) %>%
          left_join(conditions)
      )
  } else {
    stop("Something went wrong.")
  }
  
}

mean_rmse_by_condition <-
  all_rmse_estimates %>% 
  group_by(Condition) %>% 
  summarize(
    across(contains("_rmse"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_rmse"), \(x) mean(x, na.rm = TRUE), .names = "mean_{.col}")
            ) %>%
  select(-contains("mean_n_"))

se_rmse_by_condition <-
  all_rmse_estimates %>%
  group_by(Condition) %>%
  summarize(
    across(contains("_rmse"), \(x) sum(!is.na(x)), .names = "n_{.col}")
    , across(contains("_rmse"), \(x) se_estimator(x), .names = "se_{.col}")
  ) %>%
  select(-contains("se_n_"))
  

all_rmse_estimates %>%
  saveRDS("results/04_all_rmse_estimates.RDS")

mean_rmse_by_condition %>%
  saveRDS("results/04_mean_rmse_by_condition.RDS")

se_rmse_by_condition %>%
  saveRDS('results/04_se_rmse_estimates.RDS')

```

## Linear Models

```{r bias-anova}
all_bias_estimates <-
  readRDS(file = 'results/01_all_bias_estimates.RDS') 
mean_bias_estimates <-
  readRDS(file = 'results/01_mean_bias_by_condition.RDS')
se_bias_estimates <-
  readRDS(file = 'results/01_se_bias_estimates.RDS')
long_bias_estimates <-
  all_bias_estimates %>%
  pivot_longer(
    cols = contains('_bias')
    , names_to = 'method_'
    , values_to = 'bias'
  ) %>%
  mutate(
    method_ = str_remove(method_, '_theta_est_bias') |> factor(levels = c("prox", "jmle", "cmle", "eap"))
    , Item_and_Person_Params = factor(Item_and_Person_Params)
  )

linear_model_bias <-
  lm(bias ~ Item_and_Person_Params * N * method_, data = long_bias_estimates) 

linear_model_bias %>%
  summary()
linear_model_bias %>%
  anova()

linear_model_bias %>%
  sjPlot::tab_model(
    show.intercept = FALSE
    , show.reflvl = TRUE
  )

```